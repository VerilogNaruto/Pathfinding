!function(g){function I(e){if(n[e])return n[e].exports;var l=n[e]={i:e,l:!1,exports:{}};return g[e].call(l.exports,l,l.exports,I),l.l=!0,l.exports}var n={};I.m=g,I.c=n,I.i=function(g){return g},I.d=function(g,n,e){I.o(g,n)||Object.defineProperty(g,n,{configurable:!1,enumerable:!0,get:e})},I.n=function(g){var n=g&&g.__esModule?function(){return g.default}:function(){return g};return I.d(n,"a",n),n},I.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},I.p="",I(I.s=4)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _Maze = __webpack_require__(2);\n\nvar _Maze2 = _interopRequireDefault(_Maze);\n\nvar _Cell = __webpack_require__(1);\n\nvar _Cell2 = _interopRequireDefault(_Cell);\n\nvar _Search = __webpack_require__(3);\n\nvar _Search2 = _interopRequireDefault(_Search);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Board(height, width) {\n  this.height = height;\n  this.width = width;\n  this.boardArr = [];\n  this.mouseDown = false;\n  this.keyDown = false;\n  this.startNode;\n  this.finalNode;\n  this.objectNode;\n  this.currentCellStatus = null;\n  this.mode = 0;\n  this.currentPlace = null;\n  this.shouldBe = null;\n  this.algoDone = false;\n  this.currentAlgo = null;\n  this.lastWall = false;\n  this.lastWeight = false;\n  this.algoToRun = null;\n  this.canPress = true;\n  this.shouldDisable = false;\n  this.modalIndex = 0;\n  this.modalArr = [];\n} /**\n   * JavaScript Program By SOULEYMANE DEMBELE 09/23/2019\n   */\n\nBoard.prototype.initialise = function () {\n  this.createGrid();\n  this.addEventListeners();\n};\n\nBoard.prototype.createGrid = function () {\n  var initialHTML = '';\n  for (var i = 0; i < this.height; i++) {\n    //Add row HTML\n    initialHTML += \"<tr id='row\" + i.toString() + \"'>\";\n    //Add row boardArr \n    this.boardArr.push([]);\n    for (var j = 0; j < this.width; j++) {\n      //Add individual table Elements HTML \n      initialHTML += \"<td id='\" + j.toString() + \",\" + i.toString() + \"' class='unexplored'>\" + \"</td>\";\n      //Add cell element to boardArr\n      var newCell = new _Cell2.default(j, i);\n      this.boardArr[this.boardArr.length - 1].push(newCell);\n    }\n    //Finish row element HTML\n    initialHTML += \"</tr>\";\n  }\n  var board = document.getElementById('board');\n  board.innerHTML = initialHTML;\n  //Set Initial start Node\n  var xStartNode = Math.floor(this.boardArr.length / 4);\n  var y = Math.floor(this.boardArr.length / 2);\n  this.boardArr[y][xStartNode].status = 'startNode';\n  this.startNode = this.boardArr[y][xStartNode];\n  document.getElementById(this.startNode.id).className = 'startingCell';\n  //Set Initial end Node\n  var xFinalNode = Math.floor(3 * this.boardArr[0].length / 4);\n  this.finalNode = this.boardArr[y][xFinalNode];\n  this.boardArr[y][xFinalNode].status = 'finalNode';\n  document.getElementById(this.finalNode.id).className = 'finalCell';\n};\n\nBoard.prototype.addEventListeners = function () {\n  $(\"#instructions_panel\").draggable();\n  // $(\"#instructions_panel\").css({ top: '200px' });\n  var board = this;\n  //Add window keyDown event \n  window.addEventListener('keydown', function (e) {\n    e.keyCode === 16 || e.keyCode === 87 ? board.keyDown = e.keyCode : board.keyDown;\n  });\n  //Add window keyUp event \n  window.addEventListener('keyup', function () {\n    board.keyDown = false;\n  });\n  //Create Modal\n  // board.createModal()\n  //Add listeners for table elements  \n  for (var i = 0; i < this.height; i++) {\n    for (var j = 0; j < this.width; j++) {\n      var id = j.toString() + ',' + i.toString();\n      var elem = document.getElementById(id);\n      elem.addEventListener('mousedown', function (e) {\n        e.preventDefault();\n        if (this.className !== 'startingCell' && this.className !== 'startingCell shortestPath' && this.className !== 'finalCell' && this.className !== 'finalCellUP' && this.className !== 'finalCellRIGHT' && this.className !== 'finalCellDOWN' && this.className !== 'finalCellLEFT' && this.className !== 'objectCell' && !board.shouldDisable) {\n          board.changeCellClick(this.id);\n          board.mouseDown = true;\n        } else {\n          board.currentCellStatus = this.className;\n          board.mouseDown = true;\n        }\n      });\n      elem.addEventListener('mouseup', function (e) {\n        e.preventDefault();\n        board.mouseDown = false;\n        board.currentCellStatus = null;\n      });\n      elem.addEventListener('mouseenter', function (e) {\n        //  console.log(this.className)\n        e.preventDefault();\n        //Normal Wall Creation Drag Event\n        if (board.mouseDown && board.currentCellStatus === null && !board.shouldDisable) {\n          board.changeCellDrag(this.id);\n        }\n        //Dragging a start/end node \n        else if (board.mouseDown && board.currentCellStatus !== null && this.className !== 'startingCell' && this.className !== 'startingCell shortestPath' && this.className !== 'finalCell' && this.className !== 'finalCellUP' && this.className !== 'finalCellRIGHT' && this.className !== 'finalCellDOWN' && this.className !== 'finalCellLEFT' && !board.shouldDisable) {\n            this.className = board.currentCellStatus;\n            var idSplit = this.id.split(',');\n            var cell = board.getCell(idSplit[0], idSplit[1]);\n            if (this.className === 'startingCell' || this.className === 'startingCell shortestPath') {\n              if (cell.status === 'wall') {\n                board.lastWall = true;\n              } else if (cell.status === 'unexplored weight') {\n                board.lastWeight = true;\n              }\n              cell.status = 'startNode';\n              board.startNode = cell;\n              if (board.algoDone) {\n                board.clearPath();\n                var search = new _Search2.default(board.boardArr, board.startNode, board.finalNode, board.currentAlgo, board);\n                search.startSearch();\n              }\n            } else if (this.className === 'finalCell' || this.className === 'finalCellUP' || this.className === 'finalCellRIGHT' || this.className === 'finalCellDOWN' || this.className === 'finalCellLEFT') {\n              if (cell.status === 'wall') {\n                board.lastWall = true;\n              } else if (cell.status === 'unexplored weight') {\n                board.lastWeight = true;\n              }\n              cell.status = 'finalNode';\n              board.finalNode = cell;\n              if (board.algoDone) {\n                board.clearPath();\n                var search = new _Search2.default(board.boardArr, board.startNode, board.finalNode, board.currentAlgo, board);\n                search.startSearch();\n              }\n            }\n          } else if (board.mouseDown && board.currentCellStatus !== null && (this.className === 'startingCell' || this.className === 'startingCell shortestPath' || this.className === 'finalCell' || this.className === 'finalCellUP' || this.className === 'finalCellRIGHT' || this.className === 'finalCellDOWN' || this.className === 'finalCellLEFT') && !board.shouldDisable) {\n            if (this.className === 'startingCell' || this.className === 'startingCell shortestPath') {\n              board.shouldBe = 'startingCell';\n            } else if (this.className === 'finalCell' || this.className === 'finalCellUP' || this.className === 'finalCellRIGHT' || this.className === 'finalCellDOWN' || this.className === 'finalCellLEFT') {\n              board.shouldBe = 'finalCell';\n            } else if (this.className === 'objectCell') {\n              board.shouldBe = 'objectCell';\n            }\n          }\n      });\n      elem.addEventListener('mouseout', function (e) {\n        e.preventDefault();\n        if ((this.className === 'startingCell' || this.className === 'startingCell shortestPath' || this.className === 'finalCell' || this.className === 'finalCellUP' || this.className === 'finalCellRIGHT' || this.className === 'finalCellDOWN' || this.className === 'finalCellLEFT') && !board.shouldDisable) {\n          if (board.mouseDown && board.currentCellStatus !== null) {\n            if (board.shouldBe) {\n              this.className = board.shouldBe;\n              board.shouldBe = null;\n            } else {\n              if (board.lastWall) {\n                board.clearPath();\n                var idSplit = this.id.split(',');\n                var cell = board.getCell(idSplit[0], idSplit[1]);\n                this.className = 'wall';\n                cell.status = 'wall';\n                board.lastWall = false;\n              } else if (board.lastWeight) {\n                board.clearPath();\n                var idSplit = this.id.split(',');\n                var cell = board.getCell(idSplit[0], idSplit[1]);\n                this.className = 'unexplored weight';\n                cell.status = 'unexplored weight';\n                cell.weight = 15;\n                board.lastWeight = false;\n              } else {\n                board.clearPath();\n                var idSplit = this.id.split(',');\n                var cell = board.getCell(idSplit[0], idSplit[1]);\n                this.className = 'unexplored';\n                cell.status = 'unexplored';\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  //Add Listeners for Button Panel\n  //BFS\n  document.getElementById('startButtonBFS').addEventListener('click', function () {\n    if (!board.shouldDisable) {\n      document.getElementById('visualise').innerHTML = 'Visualise BFS';\n      board.algoToRun = 'BFS';\n      // search.startSearch()\n    }\n  });\n  //DFS\n  document.getElementById('startButtonDFS').addEventListener('click', function () {\n    if (!board.shouldDisable) {\n      document.getElementById('visualise').innerHTML = 'Visualise DFS';\n      board.algoToRun = 'DFS';\n      // search.startSearch()\n    }\n  });\n  //Dijkstra \n  document.getElementById('startButtonDijkstra').addEventListener('click', function () {\n    if (!board.shouldDisable) {\n      document.getElementById('visualise').innerHTML = 'Visualise Dijkstra';\n      board.algoToRun = 'Dijkstra';\n      // search.startSearch()\n    }\n  });\n  //Fake AStar 1\n  // document.getElementById('startButtonAStar').addEventListener('click',function(){ \n  //   if(!board.shouldDisable){\n  //     document.getElementById('visualise').innerHTML = 'Visualise Swarm'\n  //     board.algoToRun = 'AStar'\n  //     // search.startSearch()\n  //   }\n  // })\n  // //Fake AStar 2\n  // document.getElementById('startButtonAStar2').addEventListener('click',function(){  \n  //   if(!board.shouldDisable){\n  //     document.getElementById('visualise').innerHTML = 'Visualise Convergent Swarm'\n  //     board.algoToRun = 'AStar2'\n  //     // search.startSearch()\n  //   }\n  // })\n  // //Greedy\n  // document.getElementById('startButtonGreedy').addEventListener('click',function(){ \n  //    if(!board.shouldDisable){ \n  //     document.getElementById('visualise').innerHTML = 'Visualise Best First Search'\n  //     board.algoToRun = 'Greedy'\n  //     // search.startSearch()\n  //    }\n  // })\n\n  document.getElementById('startButtonRealAStar').addEventListener('click', function () {\n    if (!board.shouldDisable) {\n      document.getElementById('visualise').innerHTML = \"Visualise A*\";\n      board.algoToRun = 'RealAStar';\n    }\n  });\n  document.getElementById('startButtonBasicMaze').addEventListener('click', function () {\n    if (!board.shouldDisable) {\n      var maze = new _Maze2.default(board, board.startNode, board.finalNode, 'basicMaze');\n      maze.startMaze();\n    }\n  });\n  //Recursive Division 1\n  document.getElementById('startButtonBossMaze1').addEventListener('click', function () {\n    if (!board.shouldDisable) {\n      var maze = new _Maze2.default(board, board.startNode, board.finalNode, 'bossMaze1', true);\n      maze.startMaze();\n    }\n  });\n  //Recursive Division 2\n  document.getElementById('startButtonBossMaze2').addEventListener('click', function () {\n    if (!board.shouldDisable) {\n      var maze = new _Maze2.default(board, board.startNode, board.finalNode, 'bossMaze2', true);\n      maze.startMaze();\n    }\n  });\n  //Recursive Division 3\n  document.getElementById('startButtonBossMaze3').addEventListener('click', function () {\n    if (!board.shouldDisable) {\n      var maze = new _Maze2.default(board, board.startNode, board.finalNode, 'bossMaze3', true);\n      maze.startMaze();\n    }\n  });\n  //Basic Weight Maze \n  document.getElementById('startButtonBasicWeightMaze').addEventListener('click', function () {\n    console.log(board.shouldDisable);\n    if (!board.shouldDisable) {\n      var maze = new _Maze2.default(board, board.startNode, board.finalNode, 'basicWeightMaze', false);\n      maze.startMaze();\n    }\n  });\n  //Pokemon Theme\n  // document.getElementById('startButtonPokemonTheme').addEventListener('click',function(){\n  //   //\n  // }) \n  //Visualise Algorithm\n  document.getElementById('startButtonVisualise').addEventListener('click', function () {\n    board.algoDone = false;\n    // console.log(board.shouldDisable)\n    if (!board.shouldDisable && board.algoToRun) {\n      board.clearPath();\n      var algoName = board.algoToRun;\n      var search = new _Search2.default(board.boardArr, board.startNode, board.finalNode, algoName, board);\n      search.startSearch();\n    }\n  });\n  //Path\n  document.getElementById('path').addEventListener('click', function () {\n    location.reload();\n  });\n  //Clear Path\n  document.getElementById('startButtonClearPath').addEventListener('click', function () {\n    if (!board.shouldDisable) {\n      board.algoDone = false;\n      board.clearPath();\n    }\n  });\n  //Clear Walls\n  document.getElementById('startButtonClearWalls').addEventListener('click', function () {\n    if (!board.shouldDisable) {\n      board.clearWalls();\n    }\n  });\n  //Modal Buttons \n  // //Increment Page\n  // document.getElementById('nextButton').addEventListener('click',function(){\n  //   board.incrementModal()\n  // })\n  // //Decrement Page \n  // document.getElementById('previousButton').addEventListener('click',function(){\n  //   board.decrementModal()\n  // }) \n  //Close instructions \n  // document.getElementById('x').addEventListener('click',function(){\n  //    document.getElementById('panelParent').innerHTML = ''\n  //   //  console.log(\"ASF\")\n  //   //  board.changeToRed()\n  // })\n};\n\nBoard.prototype.getCell = function (x, y) {\n  return this.boardArr[y][x];\n};\n\nBoard.prototype.changeCellClick = function (id) {\n  var newId = id.split(',');\n  var x = parseInt(newId[0]);\n  var y = parseInt(newId[1]);\n  var cell = this.getCell(x, y);\n  var toggledCell = this.toggle(cell);\n  var elem = document.getElementById(id);\n  if (toggledCell) {\n    elem.className = toggledCell;\n  }\n};\n\nBoard.prototype.changeCellDrag = function (id) {\n  var newId = id.split(',');\n  var x = parseInt(newId[0]);\n  var y = parseInt(newId[1]);\n  var cell = this.getCell(x, y);\n  if (cell.status !== 'finalCell' && cell.status !== 'startingCell') {\n    var toggledCell = this.toggle(cell);\n    var elem = document.getElementById(id);\n    if (toggledCell) {\n      elem.className = toggledCell;\n    }\n  }\n};\n\nBoard.prototype.toggle = function (cell) {\n  if (cell.status === 'unexplored' && this.keyDown || cell.status === 'explored' && this.keyDown || cell.status === 'wall' && this.keyDown) {\n    // cell.status = 'unexplored water'\n    if (this.keyDown === 87) {\n      cell.weight = 15;\n      cell.status = 'unexplored weight';\n      return cell.status;\n    }\n  } else if (cell.status === 'unexplored' || cell.status === 'explored') {\n    cell.status = 'wall';\n    return cell.status;\n  } else if (cell.status === 'explored weight' || cell.status === 'unexplored weight') {\n    cell.status = 'unexplored';\n    cell.weight = 0;\n    return cell.status;\n  } else if (cell.status === 'wall') {\n    cell.status = 'unexplored';\n    return cell.status;\n  } else {\n    return false;\n  }\n};\n\nBoard.prototype.createModal = function () {\n  // Get the modal\n  var modal = document.getElementById('myModal');\n  modal.style.display = \"block\";\n  modal.height = \"500px\";\n  document.getElementById('innerDisplay').innerHTML = this.modalArr[this.modalIndex];\n\n  // Get the <span> element that closes the modal\n  var span = document.getElementsByClassName(\"close\")[0];\n\n  // When the user clicks on <span> (x), close the modal\n  span.onclick = function () {\n    modal.style.display = \"none\";\n  };\n\n  // When the user clicks anywhere outside of the modal, close it\n  // window.onclick = function(event) {\n  //     if (event.target == modal) {\n  //         modal.style.display = \"none\";\n  //     }\n  // }\n};\n\nBoard.prototype.incrementModal = function () {\n  console.log('JQUERY', $(\"#myModal\"));\n  if (this.modalIndex < this.modalArr.length - 1) {\n    this.modalIndex += 1;\n    document.getElementById('innerDisplay').innerHTML = this.modalArr[this.modalIndex];\n  } else if (this.modalIndex === this.modalArr.length - 1) {\n    var modal = document.getElementById('myModal');\n    modal.style.display = \"none\";\n  }\n};\n\nBoard.prototype.decrementModal = function () {\n  if (this.modalIndex > 0) {\n    this.modalIndex -= 1;\n    document.getElementById('innerDisplay').innerHTML = this.modalArr[this.modalIndex];\n  }\n};\n\nBoard.prototype.changeToRed = function () {\n  var list = document.getElementsByClassName('toggleColour');\n  document.getElementById('visualise').style.color = 'red';\n  for (var i = 0; i < list.length; i++) {\n    list[i].style.color = 'red';\n  }\n};\n\nBoard.prototype.changeFromRed = function () {\n  var list = document.getElementsByClassName('toggleColour');\n  document.getElementById('visualise').style.color = 'e1e4e7';\n  for (var i = 0; i < list.length; i++) {\n    list[i].style.color = 'e1e4e7';\n  }\n};\n\nBoard.prototype.clearPath = function () {\n  document.getElementById(this.finalNode.id).className = 'finalCell';\n  document.getElementById(this.startNode.id).className = 'startingCell';\n  // console.log('in clear path')\n  for (var i = 0; i < this.boardArr.length; i++) {\n    for (var j = 0; j < this.boardArr[i].length; j++) {\n      var cell = this.boardArr[i][j];\n      cell.parent = null;\n      if (cell.status === 'explored' || cell.status === 'shortestPath') {\n        cell.status = 'unexplored';\n        document.getElementById(cell.id).className = 'unexplored';\n      } else if (cell.status === 'shortestPath explored weight' || cell.status === 'explored weight') {\n        cell.status = 'unexplored weight';\n        document.getElementById(cell.id).className = 'unexplored weight';\n      }\n      if (cell.status !== 'startNode') {\n        cell.direction = 'UP';\n        cell.distance = Infinity;\n      }\n    }\n  }\n};\n\nBoard.prototype.clearParents = function (show) {\n  console.log(\"clear Parents\");\n  for (var i = 0; i < this.boardArr.length; i++) {\n    for (var j = 0; j < this.boardArr[i].length; j++) {\n      var cell = this.boardArr[i][j];\n      if (!show && cell.status !== 'shortestPath' && cell.status !== 'objectNode' && cell.status !== 'startNode') {\n        cell.parent = null;\n        cell.direction = 'UP';\n        cell.distance = Infinity;\n      }\n      if (show) {\n        console.log(cell);\n      }\n    }\n  }\n};\n\nBoard.prototype.clearWalls = function () {\n  for (var i = 0; i < this.boardArr.length; i++) {\n    for (var j = 0; j < this.boardArr[i].length; j++) {\n      var cell = this.boardArr[i][j];\n      cell.parent = null;\n      // console.log(j,i,cell)\n      if (cell.status === 'wall' || cell.status === 'unexplored weight') {\n        cell.status = 'unexplored';\n        cell.weight = 0;\n        document.getElementById(cell.id).className = 'unexplored';\n      }\n    }\n  }\n};\n\nBoard.prototype.generateRandom = function () {\n  console.log(\"Generating random Maze\");\n};\n\nvar bar = document.getElementById('navbarDiv').clientHeight + document.getElementById('mainText').clientHeight;\nvar height = Math.floor(document.documentElement.clientHeight) - bar;\nvar width = Math.floor(document.documentElement.clientWidth);\nvar finalHeight = height / 27;\nvar finalWidth = width / 25;\n$(\"#instructions_panel\").css({ top: finalHeight * 27 / 4 + 'px' });\n$(\"#instructions_panel\").css({ left: finalWidth * 25 / 3.5 + 'px' });\nvar board = new Board(finalHeight, finalWidth - 1);\n// var board = new Board(10,10)\nboard.initialise();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * JavaScript Programmed By SOULEYMANE DEMBELE 09/20/2019\n */\nvar Cell = function Cell(xPos, yPos) {\n  _classCallCheck(this, Cell);\n\n  this.x = xPos;\n  this.y = yPos;\n  this.exploredBy = null;\n  this.status = 'unexplored';\n  this.id = this.x.toString() + ',' + this.y.toString();\n  this.weight = 0;\n  this.parent = null;\n  this.direction = 'UP';\n  this.distance = Infinity;\n  this.heuristicDistance = 0;\n  this.totalDistance = Infinity;\n  this.previousStatus = 'unexplored';\n};\n\nCell.prototype.getCellStatus = function () {\n  return this.status;\n};\n\nexports.default = Cell;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9qcy9DZWxsLmpzPzRhZTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIEphdmFTY3JpcHQgUHJvZ3JhbW1lZCBCeSBTT1VMRVlNQU5FIERFTUJFTEUgMDkvMjAvMjAxOVxuICovXG52YXIgQ2VsbCA9IGZ1bmN0aW9uIENlbGwoeFBvcywgeVBvcykge1xuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2VsbCk7XG5cbiAgdGhpcy54ID0geFBvcztcbiAgdGhpcy55ID0geVBvcztcbiAgdGhpcy5leHBsb3JlZEJ5ID0gbnVsbDtcbiAgdGhpcy5zdGF0dXMgPSAndW5leHBsb3JlZCc7XG4gIHRoaXMuaWQgPSB0aGlzLngudG9TdHJpbmcoKSArICcsJyArIHRoaXMueS50b1N0cmluZygpO1xuICB0aGlzLndlaWdodCA9IDA7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgdGhpcy5kaXJlY3Rpb24gPSAnVVAnO1xuICB0aGlzLmRpc3RhbmNlID0gSW5maW5pdHk7XG4gIHRoaXMuaGV1cmlzdGljRGlzdGFuY2UgPSAwO1xuICB0aGlzLnRvdGFsRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgdGhpcy5wcmV2aW91c1N0YXR1cyA9ICd1bmV4cGxvcmVkJztcbn07XG5cbkNlbGwucHJvdG90eXBlLmdldENlbGxTdGF0dXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnN0YXR1cztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENlbGw7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvQ2VsbC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * JavaScript Program Modified By SOULEYMANE DEMBELE 09/23/2019\n */\nvar Maze = function Maze(board, startNode, finalNode, mazeToDo, animate) {\n    _classCallCheck(this, Maze);\n\n    this.board = board;\n    this.boardArr = board.boardArr;\n    this.startNode = startNode;\n    this.finalNode = finalNode;\n    this.listToAnimate = [];\n    this.mazeToDo = mazeToDo;\n    this.toAnimate = animate;\n};\n\nMaze.prototype.startMaze = function () {\n    this.board.shouldDisable = true;\n    this.board.clearWalls();\n    this.board.clearPath();\n    this.maxX = this.boardArr[0].length;\n    this.maxY = this.boardArr.length;\n    if (this.mazeToDo === 'basicMaze') {\n        this.basicMaze();\n        this.toAnimate === true ? this.animate() : this.instant();\n    } else if (this.mazeToDo === 'bossMaze1') {\n        this.mazeGenerator();\n        this.toAnimate === true ? this.animate() : this.instant();\n    } else if (this.mazeToDo === 'bossMaze2') {\n        this.mazeGenerator();\n        this.toAnimate === true ? this.animate() : this.instant();\n    } else if (this.mazeToDo === 'bossMaze3') {\n        this.mazeGenerator();\n        this.toAnimate === true ? this.animate() : this.instant();\n    } else if (this.mazeToDo === 'basicWeightMaze') {\n        this.basicWeightMaze();\n        this.toAnimate === true ? this.animate() : this.instant();\n    }\n};\n\nMaze.prototype.basicMaze = function () {\n    for (var i = 0; i < this.boardArr.length; i++) {\n        for (var j = 0; j < this.boardArr[0].length; j++) {\n            var elem = document.getElementById(j.toString() + ',' + i.toString());\n            if (Math.random() > 0.75 && elem.className !== 'startingCell' && elem.className !== 'finalCell') {\n                var cell = this.board.getCell(j, i);\n                cell.status = 'wall';\n                this.listToAnimate.push(cell);\n            }\n        }\n    }\n};\n\nMaze.prototype.basicWeightMaze = function () {\n    for (var i = 0; i < this.boardArr.length; i++) {\n        for (var j = 0; j < this.boardArr[0].length; j++) {\n            var elem = document.getElementById(j.toString() + ',' + i.toString());\n            if (Math.random() > 0.75 && elem.className !== 'startingCell' && elem.className !== 'finalCell') {\n                var cell = this.board.getCell(j, i);\n                cell.status = 'unexplored weight';\n                cell.weight = 15;\n                this.listToAnimate.push(cell);\n            }\n        }\n    }\n};\n\nMaze.prototype.mazeGenerator = function () {\n    for (var i = 0; i < this.maxY; i++) {\n        for (var j = 0; j < this.maxX; j++) {\n            if (i === 0 || i === this.maxY - 1 || j === 0 || j === this.maxX - 1) {\n                var cell = this.board.getCell(j, i);\n                if (cell.status !== 'startNode' && cell.status !== 'finalNode') {\n                    cell.status = 'wall';\n                    this.listToAnimate.push(cell);\n                }\n            }\n        }\n    }\n    this.bossMaze(2, this.boardArr[0].length - 3, 2, this.boardArr.length - 3, 'horizontal');\n};\n\nMaze.prototype.bossMaze = function (startX, endX, startY, endY, orientation) {\n    if (orientation === 'vertical') {\n        if (startX % 2 === 0 && endY - startY > -1 && endX - startX > -1) {\n            var validWall = [];\n            for (var i = startX; i < endX + 1; i += 2) {\n                validWall.push(i);\n            }\n            var randomX = validWall[Math.floor(Math.random() * validWall.length)];\n            this.drawWall(randomX, randomX, startY, endY, 'vertical');\n            var splitArr = [];\n            for (var i = startY - 1; i < endY + 2; i += 2) {\n                splitArr.push(randomX.toString() + ',' + i.toString());\n            }\n            var randomPlaceToSplitID = splitArr[Math.floor(Math.random() * splitArr.length)];\n            var elem = document.getElementById(randomPlaceToSplitID);\n            var idArr = randomPlaceToSplitID.split(',');\n            var cell = this.board.getCell(parseInt(idArr[0]), parseInt(idArr[1]));\n            if (cell.status !== 'startNode' && cell.status !== 'finalNode') {\n                cell.status = 'unexplored';\n                this.listToAnimate.push(cell);\n            }\n\n            var lengthLargerThanHeightLeft = !this.lengthLargerThanHeight(startX, randomX - 2, startY, endY);\n            var lengthLargerThanHeightRight;\n            if (this.mazeToDo === 'bossMaze 1' || this.mazeToDo === 'bossMaze2') {\n                lengthLargerThanHeightRight = !this.lengthLargerThanHeight(randomX + 2, endX, startY, endY);\n            } else if (this.mazeToDo === 'bossMaze3') {\n                lengthLargerThanHeightRight = this.lengthLargerThanHeight(randomX + 2, endX, startY, endY);\n            }\n            if (lengthLargerThanHeightLeft) {\n                this.bossMaze(startX, randomX - 2, startY, endY, 'horizontal');\n            } else {\n                this.bossMaze(startX, randomX - 2, startY, endY, 'vertical');\n            }\n            if (lengthLargerThanHeightRight) {\n                this.bossMaze(randomX + 2, endX, startY, endY, 'horizontal');\n            } else {\n                this.bossMaze(randomX + 2, endX, startY, endY, 'vertical');\n            }\n        } else {\n            return;\n        }\n    } else if (orientation === 'horizontal') {\n        if (startY % 2 === 0 && endY - startY > -1 && endX - startX > -1) {\n            var validWall = [];\n            for (var i = startY; i < endY + 1; i += 2) {\n                validWall.push(i);\n            }\n            var randomY = validWall[Math.floor(Math.random() * validWall.length)];\n            /**Draw Walls */\n            this.drawWall(startX, endX, randomY, randomY, 'horizontal');\n            var splitArr = [];\n            for (var i = startX - 1; i < endX + 2; i += 2) {\n                splitArr.push(i.toString() + ',' + randomY.toString());\n            }\n            var randomPlaceToSplitID = splitArr[Math.floor(Math.random() * splitArr.length)];\n            var elem = document.getElementById(randomPlaceToSplitID);\n            var idArr = randomPlaceToSplitID.split(',');\n            var cell = this.board.getCell(parseInt(idArr[0]), parseInt(idArr[1]));\n            if (cell.status !== 'startNode' && cell.status !== 'finalNode') {\n                cell.status = 'unexplored';\n                this.listToAnimate.push(cell);\n            }\n\n            var lengthLargerThanHeightTop = !this.lengthLargerThanHeight(startX, endX, startY, randomY - 2);\n            var lengthLargerThanHeightBottom;\n            if (this.mazeToDo === 'bossMaze1' || this.mazeToDo === 'bossMaze3') {\n                lengthLargerThanHeightBottom = !this.lengthLargerThanHeight(startX, endX, randomY + 2, endY);\n            } else if (this.mazeToDo === 'bossMaze2') {\n                lengthLargerThanHeightBottom = this.lengthLargerThanHeight(startX, endX, randomY + 2, endY);\n            }\n            if (lengthLargerThanHeightTop) {\n                this.bossMaze(startX, endX, startY, randomY - 2, 'horizontal');\n            } else {\n                this.bossMaze(startX, endX, startY, randomY - 2, 'vertical');\n            }\n            if (lengthLargerThanHeightBottom) {\n                this.bossMaze(startX, endX, randomY + 2, endY, 'horizontal');\n            } else {\n                this.bossMaze(startX, endX, randomY + 2, endY, 'vertical');\n            }\n        } else {\n            return;\n        }\n    }\n};\n\nMaze.prototype.drawWall = function (startX, endX, startY, endY, orientation) {\n    if (orientation === 'vertical') {\n        for (var i = startY - 1; i < endY + 2; i++) {\n            var elem = document.getElementById(startX.toString() + ',' + i.toString());\n            var cell = this.board.getCell(startX, i);\n            if (cell.status !== 'startNode' && cell.status !== 'finalNode') {\n                cell.status = 'wall';\n                this.listToAnimate.push(cell);\n            }\n        }\n    } else if (orientation === 'horizontal') {\n        for (var j = startX - 1; j < endX + 2; j++) {\n            var elem = document.getElementById(j.toString() + ',' + startY.toString());\n            var cell = this.board.getCell(j, startY);\n            if (cell.status !== 'startNode' && cell.status !== 'finalNode') {\n                cell.status = 'wall';\n                this.listToAnimate.push(cell);\n            }\n        }\n    }\n};\n\nMaze.prototype.lengthLargerThanHeight = function (startX, endX, startY, endY) {\n    var returnVal = endX - startX - (endY - startY) > 0;\n    return returnVal;\n};\n\nMaze.prototype.animate = function () {\n    var self = this;\n    var list = this.listToAnimate;\n    function timeout(index) {\n        setTimeout(function () {\n            if (index === list.length) {\n                self.board.shouldDisable = false;\n                return;\n            }\n            var cell = list[index];\n            document.getElementById(cell.id).className = cell.status;\n            timeout(index + 1);\n        }, 0.0001);\n    }\n    timeout(0);\n};\n\nMaze.prototype.instant = function () {\n    for (var i in this.listToAnimate) {\n        var cell = this.listToAnimate[i];\n        document.getElementById(cell.id).className = cell.status;\n    }\n    this.board.shouldDisable = false;\n};\n\nexports.default = Maze;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * JavaScript Program Modified By SOULEYMANE DEMBELE 09/23/2019\n */\nvar Search = function Search(board, startNode, finalNode, currentAlgorithm, boardA) {\n    _classCallCheck(this, Search);\n\n    this.currentAlgorithm = currentAlgorithm;\n    this.board = board;\n    this.startNode = startNode;\n    this.finalNode = finalNode;\n    this.boardA = boardA;\n};\n\nSearch.prototype.startSearch = function () {\n    this.boardA.shouldDisable = true;\n    this.boardA.changeToRed();\n    document.getElementById(this.finalNode.id).className = 'finalCell';\n    this.finalNode.className = 'finalCell';\n    if (this.currentAlgorithm === 'BFS') {\n        var exploredList = this.searchBFS();\n        this.boardA.algoDone === true ? this.showAnimationDrag(exploredList) : this.showAnimation(exploredList);\n    } else if (this.currentAlgorithm === 'DFS') {\n        var exploredList = this.searchDFS();\n        this.boardA.algoDone === true ? this.showAnimationDrag(exploredList) : this.showAnimation(exploredList);\n    } else if (this.currentAlgorithm === 'Dijkstra') {\n        var exploredList = this.searchDijkstra();\n        this.boardA.algoDone === true ? this.showAnimationDrag(exploredList) : this.showAnimation(exploredList);\n    } else if (this.currentAlgorithm === 'AStar') {\n        var exploredList = this.searchAStar();\n        this.boardA.algoDone === true ? this.showAnimationDrag(exploredList) : this.showAnimation(exploredList);\n    } else if (this.currentAlgorithm === 'AStar2') {\n        var exploredList = this.searchAStar('2');\n        this.boardA.algoDone === true ? this.showAnimationDrag(exploredList) : this.showAnimation(exploredList);\n    } else if (this.currentAlgorithm === 'Greedy') {\n        var exploredList = this.searchGreedy();\n        this.boardA.algoDone === true ? this.showAnimationDrag(exploredList) : this.showAnimation(exploredList);\n    } else if (this.currentAlgorithm === 'RealAStar') {\n        var exploredList = this.searchRealAStaar();\n        this.boardA.algoDone === true ? this.showAnimationDrag(exploredList) : this.showAnimation(exploredList);\n    } else if (this.currentAlgorithm === 'Bidirectional') {\n        var exploredList = this.searchBidirectional();\n        this.boardA.algoDone === true ? this.showAnimationDrag(exploredList) : this.showAnimation(exploredList);\n    }\n};\n\nSearch.prototype.getNeighbours = function (arr, node, algo, exploredList) {\n    var neighbourList = [];\n    //Get Neighbour Up\n    if (node.y > 0 && arr[node.y - 1][node.x].status !== 'wall') {\n        var neighbour = arr[node.y - 1][node.x];\n\n        if (neighbour.parent === null || algo === 'DFS' && neighbour.status !== 'startNode' && exploredList.indexOf(neighbour) === -1) {\n            neighbour.parent = node;\n        }\n        neighbourList.push(neighbour);\n    }\n    //Get Neighbour Right\n    if (node.x < arr[0].length - 1 && arr[node.y][node.x + 1].status !== 'wall') {\n        var neighbour = arr[node.y][node.x + 1];\n        // console.log(neighbour.id,arr.finalNode)\n        if (neighbour.parent === null || algo === 'DFS' && neighbour.status !== 'startNode' && exploredList.indexOf(neighbour) === -1) {\n            neighbour.parent = node;\n        }\n        neighbourList.push(neighbour);\n    }\n    //Get Neighbour Down\n    if (node.y < arr.length - 1 && arr[node.y + 1][node.x].status !== 'wall') {\n        var neighbour = arr[node.y + 1][node.x];\n        if (neighbour.parent === null || algo === 'DFS' && neighbour.status !== 'startNode' && exploredList.indexOf(neighbour) === -1) {\n            neighbour.parent = node;\n        }\n        neighbourList.push(neighbour);\n    }\n    //Get Neighbour Left\n    if (node.x > 0 && arr[node.y][node.x - 1].status !== 'wall') {\n        var neighbour = arr[node.y][node.x - 1];\n        if (neighbour.parent === null || algo === 'DFS' && neighbour.status !== 'startNode' && exploredList.indexOf(neighbour) === -1) {\n            neighbour.parent = node;\n        }\n        neighbourList.push(neighbour);\n    }\n    return neighbourList;\n};\n\nSearch.prototype.searchDFS = function () {\n    var exploredList = [];\n    var listToExplore = [this.startNode];\n    var isPresent = function isPresent(node) {\n        var returnVal = false;\n        for (var i = 0; i < exploredList.length; i++) {\n            if (exploredList[i].id === node.id) {\n                returnVal = true;\n            }\n        }\n        return returnVal;\n    };\n    whileLoop: while (listToExplore.length !== 0) {\n        var currentNode = listToExplore[0];\n        if (currentNode === this.finalNode) {\n            currentNode.status = 'finalNode';\n            exploredList.push(currentNode);\n            break whileLoop;\n        }\n        if (currentNode.status === 'wall') {\n            listToExplore = listToExplore.slice(1);\n        } else if (!isPresent(currentNode)) {\n            var neighbours = this.getNeighbours(this.board, currentNode, 'DFS', exploredList);\n            listToExplore = listToExplore.slice(1);\n            listToExplore = neighbours.concat(listToExplore);\n            exploredList.push(currentNode);\n        } else {\n            listToExplore = listToExplore.slice(1);\n        }\n    }\n    this.boardA.currentAlgo = 'DFS';\n    return exploredList;\n};\n\nSearch.prototype.searchBFS = function () {\n    var exploredList = [];\n    var numOnes = 0;\n    var listToExplore = [this.startNode];\n    var isPresent = function isPresent(node) {\n        var returnVal = false;\n        for (var i = 0; i < exploredList.length; i++) {\n            if (exploredList[i].id === node.id) {\n                returnVal = true;\n            }\n        }\n        return returnVal;\n    };\n    whileLoop: while (listToExplore.length !== 0) {\n        var currentNode = listToExplore[0];\n        var inWhileLoop = new Date();\n        if (currentNode === this.finalNode) {\n            // currentNode.status = 'finalNode'\n            exploredList.push(currentNode);\n            break whileLoop;\n        }\n        if (currentNode.status === 'wall') {\n            listToExplore = listToExplore.slice(1);\n        } else if (!isPresent(currentNode)) {\n            var neighbours = this.getNeighbours(this.board, currentNode);\n            listToExplore = listToExplore.slice(1);\n            listToExplore = listToExplore.concat(neighbours);\n            exploredList.push(currentNode);\n        } else {\n            listToExplore = listToExplore.slice(1);\n        }\n    }\n    this.boardA.currentAlgo = 'BFS';\n    return exploredList;\n};\n\nSearch.prototype.searchBidirectional = function () {\n    this.startNode.distance = 0;\n    this.finalNode.distance = 0;\n    var exploredList = [];\n    var listToExploreStart = [this.startNode];\n    var listToExploreFinal = [this.finalNode];\n    var numOnes = 0;\n    var count = 2;\n    var currentNode;\n    var status;\n    var pleaseWork = function pleaseWork(node, status) {\n        var returnVal = false;\n        for (var i in exploredList) {\n            if (i < exploredList.length - 1 && exploredList[i].id === node.id && exploredList[i].exploredBy !== status) {\n                // console.log(exploredList[i].id,node.id,status,exploredList[i].exploredBy)\n                returnVal = 'break';\n                break;\n            } else if (i < exploredList.length - 1 && exploredList[i].id === node.id && exploredList[i].exploredBy === status) {\n                // console.log(exploredList[i].id,node.id,status,exploredList[i].exploredBy)\n                returnVal = true;\n            }\n        }\n        return returnVal;\n    };\n    whileLoop: while (listToExploreStart.length !== 0 && listToExploreFinal.length !== 0) {\n        //Check which list to use currentNode from\n        // console.log(listToExploreStart.length+listToExploreFinal.length)\n        listToExploreStart = listToExploreStart.sort(function (nodeA, nodeB) {\n            return nodeA.distance - nodeB.distance;\n        });\n        listToExploreFinal = listToExploreFinal.sort(function (nodeA, nodeB) {\n            return nodeA.distance - nodeB.distance;\n        });\n        currentNode = count % 2 === 0 ? listToExploreStart[0] : listToExploreFinal[0];\n        // console.log(currentNode)\n        count % 2 === 0 ? status = 'start' : status = 'final';\n        var value = pleaseWork(currentNode, status);\n        // console.log(value)\n        if (value === 'break') {\n            console.log(\"breaking whileLoop\");\n            break whileLoop;\n        }\n        //Wall\n        if (currentNode.status === 'wall') {\n            count % 2 === 0 ? listToExploreStart = listToExploreStart.slice(1) : listToExploreFinal = listToExploreFinal.slice(1);\n        } else if (value === false) {\n            //Get neighbours\n            var neighbours;\n            count % 2 === 0 ? neighbours = this.getNeighboursAStar(this.board, currentNode, exploredList, 'algo', this.finalNode) : neighbours = this.getNeighboursAStar(this.board, currentNode, exploredList, 'algo', this.startNode);\n            // var neighbours = this.getNeighbours(this.board,currentNode)\n            //Remove node from listToExplore\n            if (count % 2 === 0) {\n                listToExploreStart = listToExploreStart.slice(1);\n            } else {\n                listToExploreFinal = listToExploreFinal.slice(1);\n            }\n\n            if (count % 2 === 0) {\n                var newNeighboursList = [];\n                for (var i in neighbours) {\n                    neighbours[i].exploredBy = 'start';\n                    // console.log(neighbours[i])\n                    newNeighboursList.push(neighbours[i]);\n                }\n                listToExploreStart = listToExploreStart.concat(newNeighboursList);\n            } else {\n                var newNeighboursList = [];\n                for (var i in neighbours) {\n                    neighbours[i].exploredBy = 'final';\n                    // console.log(neighbours[i])\n                    newNeighboursList.push(neighbours[i]);\n                }\n                listToExploreFinal = listToExploreFinal.concat(newNeighboursList);\n            }\n            ++count;\n            if (count < 5) {\n                console.log(exploredList);\n            }\n            exploredList.push(currentNode);\n        } else {\n            count % 2 === 0 ? listToExploreStart = listToExploreStart.slice(1) : listToExploreFinal = listToExploreFinal.slice(1);\n        }\n        // ++count\n    }\n    return exploredList;\n};\n\nSearch.prototype.searchBidirectional2 = function () {};\n\nSearch.prototype.searchAStar = function (algo) {\n    this.startNode.distance = 0;\n    var listToExplore = [this.startNode];\n    var exploredList = [];\n    var isPresent = function isPresent(node) {\n        var returnVal = false;\n        for (var i = 0; i < exploredList.length; i++) {\n            if (exploredList[i].id === node.id) {\n                returnVal = true;\n            }\n        }\n        return returnVal;\n    };\n    whileLoop: while (listToExplore.length !== 0) {\n        //Sort listToExplore by distance\n        listToExplore = listToExplore.sort(function (nodeA, nodeB) {\n            return nodeA.distance - nodeB.distance;\n        });\n        //Get currentNode\n        var currentNode = listToExplore[0];\n\n        if (currentNode === this.finalNode) {\n            currentNode.status = 'finalNode';\n            exploredList.push(currentNode);\n            break whileLoop;\n        }\n        if (currentNode.status === 'wall') {\n            listToExplore = listToExplore.slice(1);\n        } else if (!isPresent(currentNode)) {\n            //If currentNode is finalNode break\n            if (currentNode === this.finalNode) {\n                break whileLoop;\n            }\n            //Get currentNode's neighbours\n            var neighbours = this.getNeighboursAStar(this.board, currentNode, exploredList, algo, this.finalNode);\n            //Add neighbours to listToExplore\n            listToExplore = listToExplore.concat(neighbours);\n            //Remove currentNode from listToExplore\n            listToExplore = listToExplore.slice(1);\n            //Add currentNode to exploredList\n            exploredList.push(currentNode);\n        } else {\n            listToExplore = listToExplore.slice(1);\n        }\n    }\n    algo === '2' ? this.boardA.currentAlgo = 'AStar2' : this.boardA.currentAlgo = 'AStar';\n    return exploredList;\n};\n\nSearch.prototype.searchGreedy = function () {\n    this.startNode.distance = 0;\n    var listToExplore = [this.startNode];\n    var exploredList = [];\n    var isPresent = function isPresent(node) {\n        var returnVal = false;\n        for (var i = 0; i < exploredList.length; i++) {\n            if (exploredList[i].id === node.id) {\n                returnVal = true;\n            }\n        }\n        return returnVal;\n    };\n    whileLoop: while (listToExplore.length !== 0) {\n        //Sort listToExplore by distance\n        listToExplore = listToExplore.sort(function (nodeA, nodeB) {\n            return nodeA.distance - nodeB.distance;\n        });\n        //Get currentNode\n        var currentNode = listToExplore[0];\n\n        if (currentNode === this.finalNode) {\n            currentNode.status = 'finalNode';\n            exploredList.push(currentNode);\n            break whileLoop;\n        }\n        if (currentNode.status === 'wall') {\n            listToExplore = listToExplore.slice(1);\n        } else if (!isPresent(currentNode)) {\n            //If currentNode is finalNode break\n            if (currentNode === this.finalNode) {\n                break whileLoop;\n            }\n            //Get currentNode's neighbours\n            var neighbours = this.getNeighboursGreedy(this.board, currentNode, exploredList);\n            //Add neighbours to listToExplore\n            listToExplore = listToExplore.concat(neighbours);\n            //Remove currentNode from listToExplore\n            listToExplore = listToExplore.slice(1);\n            //Add currentNode to exploredList\n            exploredList.push(currentNode);\n        } else {\n            listToExplore = listToExplore.slice(1);\n        }\n    }\n    this.boardA.currentAlgo = 'Greedy';\n    return exploredList;\n};\n\nSearch.prototype.showAnimation = function (exploredList) {\n    // for(var i in exploredList){console.log(exploredList[i].status,exploredList[i].weight)}\n    var count = 0;\n    var self = this;\n    var startNode = exploredList[0];\n    exploredList = exploredList.slice(1);\n    var endNode = exploredList[exploredList.length - 1];\n    function timeout(index, exploredList, timeLength) {\n        setTimeout(function () {\n            if (index === exploredList.length) {\n                if (count === 0) showPath(endNode, self);else {\n                    self.boardA.shouldDisable = false;\n                    self.boardA.changeFromRed();\n                    self.algoDone();\n                }\n                return;\n            }\n            change(exploredList[index], index, exploredList.length);\n            timeout(index + 1, exploredList, timeLength);\n        }, timeLength);\n    }\n    function change(node, index, length) {\n        var elem = document.getElementById(node.id);\n        if (node.status === 'unexplored weight') {\n            node.status = 'explored weight';\n            elem.className = 'explored weight';\n        } else if (node.status === 'unexplored') {\n            node.status = 'explored';\n            elem.className = 'explored';\n        } else if (node.status === 'shortestPath explored weight') {\n            elem.className = 'shortestPath explored weight';\n            if (node.parent.status === 'shortestPath') document.getElementById(node.parent.id).className = 'shortestPath';\n            if (index === length - 1) self.changeFinalClassName();\n        } else if (node.status === 'shortestPath') {\n            if (node.parent.status !== 'startNode') {\n                if (node.parent.status === 'shortestPath') document.getElementById(node.parent.id).className = 'shortestPath';\n                if (index !== length - 1) {\n                    var newClassName = 'shortestPath';\n                    if (self.currentAlgorithm !== 'BFS' && self.currentAlgorithm !== 'DFS') {\n                        newClassName += node.direction;\n                    } else {\n                        newClassName += 'NODIRECTION';\n                    }\n                    console.log(newClassName);\n                    document.getElementById(node.id).className = newClassName;\n                } else {\n                    document.getElementById(node.id).className = 'shortestPath';\n                    self.changeFinalClassName();\n                }\n            } else {\n                document.getElementById(node.parent.id).className = 'startingCell shortestPath';\n                node.status = 'shortestPath';\n                if (self.finalNode.parent === node) {\n                    document.getElementById(node.id).className = 'shortestPath' + node.direction;\n                    self.changeFinalClassName(node);\n                }\n            }\n        }\n    }\n    function showPath(node, search) {\n        count++;\n        var listPath = [];\n        var endNode = Object.assign({}, node);\n        while (node !== startNode) {\n            if (node.status !== endNode.status) {\n                listPath.push(node);\n            }\n            node = node.parent;\n        }\n        if (endNode.status === self.finalNode.status) {\n            listPath.forEach(function (e) {\n                e.status === 'explored weight' ? e.status = 'shortestPath explored weight' : e.status = 'shortestPath';\n            });\n            timeout(0, listPath.reverse(), 35);\n        } else {\n            self.boardA.shouldDisable = false;\n        }\n    }\n    timeout(0, exploredList, 0.001);\n};\n\nSearch.prototype.algoDone = function () {\n    this.boardA.algoDone = true;\n};\n\nSearch.prototype.changeFinalClassName = function (node) {\n    if (node) document.getElementById(node.id).className = 'shortestPath';\n    var finalCell;\n    finalCell = document.getElementsByClassName('finalCell')[1];\n    if (!finalCell) finalCell = document.getElementsByClassName('finalCellUP')[0];\n    if (!finalCell) finalCell = document.getElementsByClassName('finalCellRIGHT')[0];\n    if (!finalCell) finalCell = document.getElementsByClassName('finalCellDOWN')[0];\n    if (!finalCell) finalCell = document.getElementsByClassName('finalCellLEFT')[0];\n    if (this.currentAlgorithm !== 'BFS' && this.currentAlgorithm !== 'DFS') {\n        finalCell.className = 'finalCell' + this.finalNode.direction;\n    } else {\n        finalCell.className = 'finalCell' + 'NODIRECTION';\n    }\n};\n\nSearch.prototype.changeFirstClassName = function () {\n    document.getElementById(this.startNode.id).className = 'startingCell shortestPath';\n};\n\nSearch.prototype.showAnimationDrag = function (exploredList) {\n    for (var i in exploredList) {\n        var cell = exploredList[i];\n        if (cell.status === 'unexplored') {\n            cell.status = 'explored';\n            document.getElementById(cell.id).className = 'explored';\n        } else if (cell.status === 'unexplored weight') {\n            cell.status = 'explored weight';\n            document.getElementById(cell.id).className = 'explored weight';\n        }\n    }\n    var endNode = exploredList[exploredList.length - 1];\n    var newEndNode = Object.assign({}, endNode);\n    var shortestPathList = [];\n    while (endNode !== this.startNode) {\n        shortestPathList.push(endNode);\n        endNode = endNode.parent;\n    }\n    shortestPathList = shortestPathList.reverse();\n    if (newEndNode.status === 'finalNode') {\n        this.changeFirstClassName();\n        this.changeFinalClassName();\n        for (var i in shortestPathList) {\n            var cell = shortestPathList[i];\n            if (cell.status === 'explored weight') {\n                cell.status = 'shortestPath explored weight';\n                document.getElementById(cell.id).className = 'shortestPath explored weight';\n            } else if (cell.status !== 'startNode' && cell.status !== 'finalNode') {\n                cell.status = 'explored';\n                document.getElementById(cell.id).className = 'shortestPath';\n            }\n        }\n    }\n    this.boardA.shouldDisable = false;\n    this.boardA.changeFromRed();\n    this.boardA.algoDone = true;\n};\n\nSearch.prototype.getNeighboursDijkstra = function (arr, node, exploredList) {\n    var neigbourList = [];\n    //Up\n    if (node.y > 0 && arr[node.y - 1][node.x].status !== 'wall' && this.hasBeenExplored(arr[node.y - 1][node.x], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y - 1][node.x];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'UP');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = currentDistance + numberOfMoves + 1 + neighbour.weight;\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'UP';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Right\n    if (node.x < arr[0].length - 1 && arr[node.y][node.x + 1].status !== 'wall' && this.hasBeenExplored(arr[node.y][node.x + 1], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y][node.x + 1];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'RIGHT');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = currentDistance + numberOfMoves + 1 + neighbour.weight;\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'RIGHT';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Down\n    if (node.y < arr.length - 1 && arr[node.y + 1][node.x].status !== 'wall' && this.hasBeenExplored(arr[node.y + 1][node.x], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y + 1][node.x];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'DOWN');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = currentDistance + numberOfMoves + 1 + neighbour.weight;\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'DOWN';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Left\n    if (node.x > 0 && arr[node.y][node.x - 1].status !== 'wall' && this.hasBeenExplored(arr[node.y][node.x - 1], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y][node.x - 1];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'LEFT');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = currentDistance + numberOfMoves + 1 + neighbour.weight;\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'LEFT';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    return neigbourList;\n};\n\nSearch.prototype.getNeighboursAStar = function (arr, node, exploredList, algo, finalNode) {\n    var neigbourList = [];\n    //Up\n    if (node.y > 0 && arr[node.y - 1][node.x].status !== 'wall' && this.hasBeenExplored(arr[node.y - 1][node.x], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y - 1][node.x];\n        // console.log('neighbour',neighbour.distance)\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'UP');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = currentDistance + numberOfMoves + 1 + this.manhattanDistance(neighbour, finalNode) + neighbour.weight;\n        var newNeighbourDistance2 = currentDistance + numberOfMoves + 1 + Math.pow(this.manhattanDistance(neighbour, finalNode), 6) + neighbour.weight;\n        algo === '2' ? newNeighbourDistance = newNeighbourDistance2 : newNeighbourDistance;\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            // console.log(\"here\")\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'UP';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Right\n    if (node.x < arr[0].length - 1 && arr[node.y][node.x + 1].status !== 'wall' && this.hasBeenExplored(arr[node.y][node.x + 1], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y][node.x + 1];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'RIGHT');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = currentDistance + numberOfMoves + 1 + this.manhattanDistance(neighbour, finalNode) + neighbour.weight;\n        var newNeighbourDistance2 = currentDistance + numberOfMoves + 1 + Math.pow(this.manhattanDistance(neighbour, finalNode), 6) + neighbour.weight;\n        algo === '2' ? newNeighbourDistance = newNeighbourDistance2 : newNeighbourDistance;\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'RIGHT';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Down\n    if (node.y < arr.length - 1 && arr[node.y + 1][node.x].status !== 'wall' && this.hasBeenExplored(arr[node.y + 1][node.x], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y + 1][node.x];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'DOWN');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = currentDistance + numberOfMoves + 1 + this.manhattanDistance(neighbour, finalNode) + neighbour.weight;\n        var newNeighbourDistance2 = currentDistance + numberOfMoves + 1 + Math.pow(this.manhattanDistance(neighbour, finalNode), 6) + neighbour.weight;\n        algo === '2' ? newNeighbourDistance = newNeighbourDistance2 : newNeighbourDistance;\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'DOWN';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Left\n    if (node.x > 0 && arr[node.y][node.x - 1].status !== 'wall' && this.hasBeenExplored(arr[node.y][node.x - 1], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y][node.x - 1];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'LEFT');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = currentDistance + numberOfMoves + 1 + this.manhattanDistance(neighbour, finalNode) + neighbour.weight;\n        var newNeighbourDistance2 = currentDistance + numberOfMoves + 1 + Math.pow(this.manhattanDistance(neighbour, finalNode), 6) + neighbour.weight;\n        algo === '2' ? newNeighbourDistance = newNeighbourDistance2 : newNeighbourDistance;\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'LEFT';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    return neigbourList;\n};\n\nSearch.prototype.getNeighboursGreedy = function (arr, node, exploredList) {\n    var neigbourList = [];\n    //Up\n    if (node.y > 0 && arr[node.y - 1][node.x].status !== 'wall' && this.hasBeenExplored(arr[node.y - 1][node.x], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y - 1][node.x];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'UP');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = this.manhattanDistance(neighbour, this.finalNode);\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'UP';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Right\n    if (node.x < arr[0].length - 1 && arr[node.y][node.x + 1].status !== 'wall' && this.hasBeenExplored(arr[node.y][node.x + 1], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y][node.x + 1];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'RIGHT');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = this.manhattanDistance(neighbour, this.finalNode);\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'RIGHT';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Down\n    if (node.y < arr.length - 1 && arr[node.y + 1][node.x].status !== 'wall' && this.hasBeenExplored(arr[node.y + 1][node.x], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y + 1][node.x];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'DOWN');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = this.manhattanDistance(neighbour, this.finalNode);\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'DOWN';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Left\n    if (node.x > 0 && arr[node.y][node.x - 1].status !== 'wall' && this.hasBeenExplored(arr[node.y][node.x - 1], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y][node.x - 1];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'LEFT');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = this.manhattanDistance(neighbour, this.finalNode);\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'LEFT';\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    return neigbourList;\n};\n\nSearch.prototype.searchDijkstra = function () {\n    this.startNode.distance = 0;\n    var listToExplore = [this.startNode];\n    var exploredList = [];\n    var isPresent = function isPresent(node) {\n        var returnVal = false;\n        for (var i = 0; i < exploredList.length; i++) {\n            if (exploredList[i].id === node.id) {\n                returnVal = true;\n            }\n        }\n        return returnVal;\n    };\n    whileLoop: while (listToExplore.length !== 0) {\n        //Sort listToExplore by distance\n        listToExplore = listToExplore.sort(function (nodeA, nodeB) {\n            return nodeA.distance - nodeB.distance;\n        });\n        //Get currentNode\n        var currentNode = listToExplore[0];\n\n        if (currentNode === this.finalNode) {\n            currentNode.status = 'finalNode';\n            exploredList.push(currentNode);\n            break whileLoop;\n        }\n        if (currentNode.status === 'wall') {\n            listToExplore = listToExplore.slice(1);\n        } else if (!isPresent(currentNode)) {\n            //If currentNode is finalNode break\n            if (currentNode === this.finalNode) {\n                break whileLoop;\n            }\n            //Get currentNode's neighbours\n            var neighbours = this.getNeighboursDijkstra(this.board, currentNode, exploredList);\n            //Add neighbours to listToExplore\n            listToExplore = listToExplore.concat(neighbours);\n            //Remove currentNode from listToExplore\n            listToExplore = listToExplore.slice(1);\n            //Add currentNode to exploredList\n            exploredList.push(currentNode);\n        } else {\n            listToExplore = listToExplore.slice(1);\n        }\n    }\n    this.boardA.currentAlgo = 'Dijkstra';\n\n    return exploredList;\n};\n\nSearch.prototype.hasBeenExplored = function (node, exploredList) {\n    var returnVal = false;\n    for (var i in exploredList.length) {\n        if (exploredList[i].id === node.id) {\n            returnVal = true;\n        }\n    }\n    return returnVal;\n};\n\nSearch.prototype.checkNumberOfMoves = function (currentDirection, direction) {\n    if (currentDirection === direction) {\n        return 0;\n    } else if ((currentDirection === 'UP' || currentDirection === 'DOWN') && (direction === 'LEFT' || direction === 'RIGHT')) {\n        return 1;\n    } else if ((currentDirection === 'LEFT' || currentDirection === 'RIGHT') && (direction === 'UP' || direction === 'DOWN')) {\n        return 1;\n    } else if ((currentDirection === 'LEFT' || currentDirection === 'RIGHT') && (direction === 'LEFT' || direction === 'RIGHT')) {\n        return 2;\n    } else if ((currentDirection === 'UP' || currentDirection === 'DOWN') && (direction === 'UP' || direction === 'DOWN')) {\n        return 2;\n    }\n};\n\nSearch.prototype.manhattanDistance = function (node1, node2) {\n    var xDiff = Math.abs(node1.x - node2.x);\n    var yDiff = Math.abs(node1.y - node2.y);\n    var distance = Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2));\n    var sum = xDiff + yDiff;\n    return sum;\n};\n\nSearch.prototype.realAStar = function () {\n    this.startNode.distance = 0;\n    this.startNode.heuristicDistance = this.manhattanDistance(this.startNode, this.finalNode);\n    this.startNode.totalDistance = this.startNode.distance + this.startNode.heuristicDistance;\n    var listToExplore = [this.startNode];\n    var exploredList = [];\n    var isPresent = function isPresent(node) {\n        var returnVal = false;\n        for (var i = 0; i < exploredList.length; i++) {\n            if (exploredList[i].id === node.id) {\n                returnVal = true;\n            }\n        }\n        return returnVal;\n    };\n    whileLoop: while (listToExplore.length !== 0) {\n        //Sort listToExplore by distance\n        listToExplore = listToExplore.sort(function (nodeA, nodeB) {\n            return nodeA.totalDistance + nodeA.heuristicDistance - (nodeB.totalDistance + nodeB.heuristicDistance);\n        });\n        //Get currentNode\n        var currentNode = listToExplore[0];\n\n        if (currentNode === this.finalNode) {\n            currentNode.status = 'finalNode';\n            exploredList.push(currentNode);\n            break whileLoop;\n        }\n        if (currentNode.status === 'wall') {\n            listToExplore = listToExplore.slice(1);\n        } else if (!isPresent(currentNode)) {\n            //If currentNode is finalNode break\n            if (currentNode === this.finalNode) {\n                break whileLoop;\n            }\n            //Get currentNode's neighbours\n            var neighbours = this.getNeighboursRealAStar(this.board, currentNode, exploredList);\n            //Add neighbours to listToExplore\n            listToExplore = listToExplore.concat(neighbours);\n            //Remove currentNode from listToExplore\n            listToExplore = listToExplore.slice(1);\n            //Add currentNode to exploredList\n            exploredList.push(currentNode);\n        } else {\n            listToExplore = listToExplore.slice(1);\n        }\n    }\n    this.boardA.currentAlgo = 'RealAStar';\n    return exploredList;\n};\n\nSearch.prototype.getNeighboursRealAStar = function (arr, node, exploredList) {\n    var self = this;\n    var list = this.getNeighboursDijkstra(arr, node, exploredList);\n    list.forEach(function (neighbour) {\n        neighbour.heuristicDistance = self.manhattanDistance(neighbour, self.finalNode);\n        neighbour.totalDistance = neighbour.distance + neighbour.heuristicDistance;\n        console.log(neighbour);\n    });\n    return list;\n};\n\nSearch.prototype.searchRealAStaar = function () {\n    this.startNode.distance = 0;\n    this.startNode.heuristicDistance = this.manhattanDistance(this.startNode, this.finalNode);\n    this.startNode.totalDistance = this.startNode.distance + this.startNode.heuristicDistance;\n    var listToExplore = [this.startNode];\n    var exploredList = [];\n    var isPresent = function isPresent(node) {\n        var returnVal = false;\n        for (var i = 0; i < exploredList.length; i++) {\n            if (exploredList[i].id === node.id) {\n                returnVal = true;\n            }\n        }\n        return returnVal;\n    };\n    whileLoop: while (listToExplore.length !== 0) {\n        //Sort listToExplore by distance\n        listToExplore = listToExplore.sort(function (nodeA, nodeB) {\n            if (nodeA.totalDistance === nodeB.totalDistance) {\n                return nodeA.heuristicDistance - nodeB.heuristicDistance;\n            }\n            return nodeA.totalDistance - nodeB.totalDistance;\n        });\n        //Get currentNode\n        var currentNode = listToExplore[0];\n\n        if (currentNode === this.finalNode) {\n            currentNode.status = 'finalNode';\n            exploredList.push(currentNode);\n            break whileLoop;\n        }\n        if (currentNode.status === 'wall') {\n            listToExplore = listToExplore.slice(1);\n        } else if (!isPresent(currentNode)) {\n            //If currentNode is finalNode break\n            if (currentNode === this.finalNode) {\n                break whileLoop;\n            }\n            //Get currentNode's neighbours\n            var neighbours = this.getNeighboursRealAStaar(this.board, currentNode, exploredList);\n            //Add neighbours to listToExplore\n            listToExplore = listToExplore.concat(neighbours);\n            //Remove currentNode from listToExplore\n            listToExplore = listToExplore.slice(1);\n            //Add currentNode to exploredList\n            exploredList.push(currentNode);\n        } else {\n            listToExplore = listToExplore.slice(1);\n        }\n    }\n    this.boardA.currentAlgo = 'RealAStar';\n\n    return exploredList;\n};\n\nSearch.prototype.getNeighboursRealAStaar = function (arr, node, exploredList) {\n    var neigbourList = [];\n    //Up\n    if (node.y > 0 && arr[node.y - 1][node.x].status !== 'wall' && this.hasBeenExplored(arr[node.y - 1][node.x], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y - 1][node.x];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'UP');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = node.distance + 1 + numberOfMoves + neighbour.weight;\n        neighbour.heuristicDistance = this.manhattanDistance(neighbour, this.finalNode);\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'UP';\n            neighbour.totalDistance = neighbour.heuristicDistance + neighbour.distance;\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Right\n    if (node.x < arr[0].length - 1 && arr[node.y][node.x + 1].status !== 'wall' && this.hasBeenExplored(arr[node.y][node.x + 1], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y][node.x + 1];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'RIGHT');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = node.distance + 1 + numberOfMoves + neighbour.weight;\n        neighbour.heuristicDistance = this.manhattanDistance(neighbour, this.finalNode);\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'RIGHT';\n            neighbour.totalDistance = neighbour.heuristicDistance + neighbour.distance;\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Down\n    if (node.y < arr.length - 1 && arr[node.y + 1][node.x].status !== 'wall' && this.hasBeenExplored(arr[node.y + 1][node.x], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y + 1][node.x];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'DOWN');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = node.distance + 1 + numberOfMoves + neighbour.weight;\n        neighbour.heuristicDistance = this.manhattanDistance(neighbour, this.finalNode);\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'DOWN';\n            neighbour.totalDistance = neighbour.heuristicDistance + neighbour.distance;\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    //Left\n    if (node.x > 0 && arr[node.y][node.x - 1].status !== 'wall' && this.hasBeenExplored(arr[node.y][node.x - 1], exploredList) === false) {\n        //Get Up neighbour\n        var neighbour = arr[node.y][node.x - 1];\n        //Get current distance\n        var currentDistance = node.distance;\n        //Get My Direction\n        var myDirection = node.direction;\n        //Calculate number of moves to get to Get to Up Direction\n        var numberOfMoves = this.checkNumberOfMoves(myDirection, 'LEFT');\n        //Calculate new neighbour distance\n        var newNeighbourDistance = node.distance + 1 + numberOfMoves + neighbour.weight;\n        neighbour.heuristicDistance = this.manhattanDistance(neighbour, this.finalNode);\n        //If this is lower than the currentDistance on the neighbour change\n        if (newNeighbourDistance < neighbour.distance) {\n            neighbour.distance = newNeighbourDistance;\n            neighbour.direction = 'LEFT';\n            neighbour.totalDistance = neighbour.heuristicDistance + neighbour.distance;\n            //Add neighbour to neigbourList\n            neigbourList.push(neighbour);\n            neighbour.parent = node;\n        }\n    }\n    return neigbourList;\n};\n\nexports.default = Search;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(g,I,n){g.exports=n(0)}]);